"""Initial migration with User, Skill, UserProgress, QuestionLog models

Revision ID: c653ca549125
Revises:
Create Date: 2025-04-10 23:41:46.064136

"""

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "c653ca549125"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "skills",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("skill_id_string", sa.String(length=100), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("skills", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_skills_skill_id_string"), ["skill_id_string"], unique=True
        )

    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_identifier", sa.String(length=255), nullable=False),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_users_user_identifier"), ["user_identifier"], unique=True
        )

    op.create_table(
        "question_logs",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("skill_id", sa.Integer(), nullable=False),
        sa.Column("session_id", sa.String(length=100), nullable=True),
        sa.Column(
            "question_timestamp",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column("difficulty_presented", sa.Integer(), nullable=False),
        sa.Column("prompt_used", sa.Text(), nullable=True),
        sa.Column("question_text_generated", sa.Text(), nullable=False),
        sa.Column("expected_answer", sa.String(length=255), nullable=True),
        sa.Column("user_answer", sa.String(length=255), nullable=True),
        sa.Column("is_correct", sa.Boolean(), nullable=True),
        sa.Column("response_time_ms", sa.Integer(), nullable=True),
        sa.Column("feedback_given", sa.Text(), nullable=True),
        sa.ForeignKeyConstraint(
            ["skill_id"],
            ["skills.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("question_logs", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_question_logs_question_timestamp"),
            ["question_timestamp"],
            unique=False,
        )
        batch_op.create_index(
            batch_op.f("ix_question_logs_session_id"), ["session_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_question_logs_skill_id"), ["skill_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_question_logs_user_id"), ["user_id"], unique=False
        )
        batch_op.create_index(
            "ix_question_logs_user_skill_time",
            ["user_id", "skill_id", "question_timestamp"],
            unique=False,
        )

    op.create_table(
        "user_progress",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("skill_id", sa.Integer(), nullable=False),
        sa.Column("current_difficulty", sa.Integer(), nullable=False),
        sa.Column("correct_streak", sa.Integer(), nullable=False),
        sa.Column("incorrect_streak", sa.Integer(), nullable=False),
        sa.Column("last_interaction_at", sa.DateTime(), nullable=True),
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("(CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["skill_id"],
            ["skills.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("user_id", "skill_id", name="uq_user_skill"),
    )
    with op.batch_alter_table("user_progress", schema=None) as batch_op:
        batch_op.create_index(
            "ix_user_progress_user_skill", ["user_id", "skill_id"], unique=False
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("user_progress", schema=None) as batch_op:
        batch_op.drop_index("ix_user_progress_user_skill")

    op.drop_table("user_progress")
    with op.batch_alter_table("question_logs", schema=None) as batch_op:
        batch_op.drop_index("ix_question_logs_user_skill_time")
        batch_op.drop_index(batch_op.f("ix_question_logs_user_id"))
        batch_op.drop_index(batch_op.f("ix_question_logs_skill_id"))
        batch_op.drop_index(batch_op.f("ix_question_logs_session_id"))
        batch_op.drop_index(batch_op.f("ix_question_logs_question_timestamp"))

    op.drop_table("question_logs")
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_users_user_identifier"))

    op.drop_table("users")
    with op.batch_alter_table("skills", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_skills_skill_id_string"))

    op.drop_table("skills")
    # ### end Alembic commands ###

# .github/workflows/deploy_staging.yml
name: Deploy to Staging (Render)

on:
  push:
    branches:
      - staging # Trigger deployment on push to the staging branch

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read # Needed to check out the repository
      packages: write # Needed to push Docker image to GHCR

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use latest version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3 # Use latest version

      - name: Build Docker image for testing
        id: build_test
        uses: docker/build-push-action@v5 # Use latest version
        with:
          context: .
          file: ./Dockerfile
          push: false # Don't push yet, just build and load to local Docker daemon
          tags: sigma-ai-staging-test:latest # Temporary tag for testing
          load: true # Load the image into the local Docker daemon for testing
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run tests
        run: |
          echo "Running tests within the Docker container..."
          # Run the container and execute pytest.
          # Ensure necessary env vars for testing are set if required.
          # Example assumes tests can run directly with code inside image:
          docker run --rm \
            -e FLASK_ENV=testing \
            -e SQLALCHEMY_DATABASE_URI=sqlite:///:memory: \
            # Add other necessary test environment variables here (e.g., dummy API keys)
            sigma-ai-staging-test:latest \
            pytest tests/
        # The workflow will fail here if pytest exits with a non-zero code

      - name: Log in to GitHub Container Registry
        if: success() # Only run if tests pass
        uses: docker/login-action@v3 # Use latest version
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Define Image Tags
        if: success()
        id: meta
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/sigmaai-staging # Lowercase repo name recommended
          # Use Git SHA for specific tag, and 'latest' for easy Render config
          echo "IMAGE_TAG_SHA=$(echo $IMAGE_ID:${{ github.sha }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "IMAGE_TAG_LATEST=$(echo $IMAGE_ID:latest | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "Image SHA Tag: ${{ env.IMAGE_TAG_SHA }}"
          echo "Image Latest Tag: ${{ env.IMAGE_TAG_LATEST }}"

      - name: Build and push Docker image to GHCR
        if: success()
        uses: docker/build-push-action@v5 # Use latest version
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_TAG_SHA }}
            ${{ env.IMAGE_TAG_LATEST }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trigger Render Deploy Hook
        if: success()
        run: |
          echo "Triggering Render deployment..."
          # Store the Deploy Hook URL as a secret named RENDER_DEPLOY_HOOK_URL in GitHub repository settings
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

      - name: Verify Deployment
        if: success()
        run: |
          echo "Waiting for Render deployment to settle..."
          sleep 90 # Increased sleep time to allow Render more time

          # Replace YOUR_RENDER_SERVICE_URL with the actual URL from Render
          # Store this URL as a secret named RENDER_SERVICE_URL in GitHub repository settings
          SERVICE_URL="${{ secrets.RENDER_SERVICE_URL }}"
          HEALTH_CHECK_URL="$SERVICE_URL/health"

          if [ -z "$SERVICE_URL" ]; then
            echo "Error: RENDER_SERVICE_URL secret is not set."
            exit 1
          fi

          echo "Performing health check on $HEALTH_CHECK_URL"
          # Retry a few times with longer intervals
          for i in {1..5}; do
            HTTP_STATUS=$(curl --silent --output /dev/null --write-out "%{http_code}" --max-time 15 $HEALTH_CHECK_URL)
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "Health check PASSED (Status: $HTTP_STATUS)"
              exit 0
            else
              echo "Health check FAILED (Status: $HTTP_STATUS). Retrying in 30s... (Attempt $i/5)"
              sleep 30
            fi
          done
          echo "Health check FAILED after multiple attempts."
          exit 1
